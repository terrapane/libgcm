/*
 *  test_aes_gcm.cpp
 *
 *  Copyright (C) 2024
 *  Terrapane Corporation
 *  All Rights Reserved
 *
 *  Author:
 *      Paul E. Jones <paulej@packetizer.com>
 *
 *  Description:
 *      This module will test the GCM object using the AES cipher functionality.
 *
 *  Portability Issues:
 *      None.
 */

#include <ostream>
#include <array>
#include <terra/crypto/cipher/gcm.h>
#include <terra/stf/adapters/integral_array.h>
#include <terra/stf/stf.h>

using namespace Terra::Crypto::Cipher;

// Define a class that is useful for testing
class GCM_ : public GCM
{
    public:
        using GCM::GCM;
        using GCM::H;
        using GCM::Y0;
        using GCM::Y;
};

// Test case 1 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase1)
{
    const std::array<std::uint8_t, 16> key =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b,
        0x88, 0x4c, 0xfa, 0x59, 0xca, 0x34, 0x2b, 0x2e
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,
        0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a
    };
    std::array<std::uint8_t, 16> tag{};

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 2 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase2)
{
    const std::array<std::uint8_t, 16> key =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> plaintext =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> expected_ciphertext =
    {
        0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,
        0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b,
        0x88, 0x4c, 0xfa, 0x59, 0xca, 0x34, 0x2b, 0x2e
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,
        0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf
    };
    std::array<std::uint8_t, 16> ciphertext;
    std::array<std::uint8_t, 16> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 3 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase3)
{
    const std::array<std::uint8_t, 16> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88
    };
    const std::array<std::uint8_t, 64> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55
    };
    const std::array<std::uint8_t, 64> expected_ciphertext =
    {
        0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
        0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
        0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
        0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
        0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
        0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
        0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
        0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xb8, 0x3b, 0x53, 0x37, 0x08, 0xbf, 0x53, 0x5d,
        0x0a, 0xa6, 0xe5, 0x29, 0x80, 0xd5, 0x3b, 0x78
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,
        0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4
    };
    std::array<std::uint8_t, 64> ciphertext;
    std::array<std::uint8_t, 64> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 4 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase4)
{
    const std::array<std::uint8_t, 16> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
        0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
        0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
        0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
        0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
        0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
        0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
        0x3d, 0x58, 0xe0, 0x91
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xb8, 0x3b, 0x53, 0x37, 0x08, 0xbf, 0x53, 0x5d,
        0x0a, 0xa6, 0xe5, 0x29, 0x80, 0xd5, 0x3b, 0x78
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,
        0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 5 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase5)
{
    const std::array<std::uint8_t, 16> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 8> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,
        0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,
        0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,
        0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,
        0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,
        0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,
        0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,
        0xc2, 0x3f, 0x45, 0x98
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xb8, 0x3b, 0x53, 0x37, 0x08, 0xbf, 0x53, 0x5d,
        0x0a, 0xa6, 0xe5, 0x29, 0x80, 0xd5, 0x3b, 0x78
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0xc4, 0x3a, 0x83, 0xc4, 0xc4, 0xba, 0xde, 0xc4,
        0x35, 0x4c, 0xa9, 0x84, 0xdb, 0x25, 0x2f, 0x7d
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,
        0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 6 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase6)
{
    const std::array<std::uint8_t, 16> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 60> iv =
    {
        0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
        0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
        0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
        0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
        0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,
        0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,
        0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,
        0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,
        0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,
        0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,
        0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,
        0x4c, 0x34, 0xae, 0xe5
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xb8, 0x3b, 0x53, 0x37, 0x08, 0xbf, 0x53, 0x5d,
        0x0a, 0xa6, 0xe5, 0x29, 0x80, 0xd5, 0x3b, 0x78
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x3b, 0xab, 0x75, 0x78, 0x0a, 0x31, 0xc0, 0x59,
        0xf8, 0x3d, 0x2a, 0x44, 0x75, 0x2f, 0x98, 0x64
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,
        0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 7 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase7)
{
    const std::array<std::uint8_t, 24> key =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xaa, 0xe0, 0x69, 0x92, 0xac, 0xbf, 0x52, 0xa3,
        0xe8, 0xf4, 0xa9, 0x6e, 0xc9, 0x30, 0x0b, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,
        0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35
    };
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 8 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase8)
{
    const std::array<std::uint8_t, 24> key =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> plaintext =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> expected_ciphertext =
    {
        0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,
        0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xaa, 0xe0, 0x69, 0x92, 0xac, 0xbf, 0x52, 0xa3,
        0xe8, 0xf4, 0xa9, 0x6e, 0xc9, 0x30, 0x0b, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,
        0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb
    };
    std::array<std::uint8_t, 16> ciphertext;
    std::array<std::uint8_t, 16> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));

}

// Test case 9 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase9)
{
    const std::array<std::uint8_t, 24> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88
    };
    const std::array<std::uint8_t, 64> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55
    };
    const std::array<std::uint8_t, 64> expected_ciphertext =
    {
        0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
        0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
        0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
        0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
        0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
        0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
        0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
        0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0x46, 0x69, 0x23, 0xec, 0x9a, 0xe6, 0x82, 0x21,
        0x4f, 0x2c, 0x08, 0x2b, 0xad, 0xb3, 0x92, 0x49
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,
        0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14
    };
    std::array<std::uint8_t, 64> ciphertext;
    std::array<std::uint8_t, 64> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 10 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase10)
{
    const std::array<std::uint8_t, 24> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
        0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
        0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
        0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
        0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
        0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
        0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
        0xcc, 0xda, 0x27, 0x10
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0x46, 0x69, 0x23, 0xec, 0x9a, 0xe6, 0x82, 0x21,
        0x4f, 0x2c, 0x08, 0x2b, 0xad, 0xb3, 0x92, 0x49
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,
        0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 11 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase11)
{
    const std::array<std::uint8_t, 24> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c
    };
    const std::array<std::uint8_t, 8> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,
        0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,
        0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,
        0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,
        0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,
        0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,
        0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,
        0xa0, 0xf0, 0x62, 0xf7
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0x46, 0x69, 0x23, 0xec, 0x9a, 0xe6, 0x82, 0x21,
        0x4f, 0x2c, 0x08, 0x2b, 0xad, 0xb3, 0x92, 0x49
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0xa1, 0x43, 0x78, 0x07, 0x8d, 0x27, 0x25, 0x8a,
        0x62, 0x92, 0x73, 0x7e, 0x18, 0x02, 0xad, 0xa5
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,
        0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 12 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase12)
{
    const std::array<std::uint8_t, 24> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c
    };
    const std::array<std::uint8_t, 60> iv =
    {
        0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
        0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
        0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
        0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
        0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,
        0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,
        0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,
        0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,
        0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,
        0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
        0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
        0xe9, 0xb7, 0x37, 0x3b
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0x46, 0x69, 0x23, 0xec, 0x9a, 0xe6, 0x82, 0x21,
        0x4f, 0x2c, 0x08, 0x2b, 0xad, 0xb3, 0x92, 0x49
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x45, 0x05, 0xcd, 0xc3, 0x67, 0xa0, 0x54, 0xc5,
        0x00, 0x28, 0x20, 0xe9, 0x6a, 0xeb, 0xef, 0x27
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,
        0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 13 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase13)
{
    const std::array<std::uint8_t, 32> key =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89,
        0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,
        0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b
    };
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 14 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase14)
{
    const std::array<std::uint8_t, 32> key =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> plaintext =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const std::array<std::uint8_t, 16> expected_ciphertext =
    {
        0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,
        0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89,
        0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,
        0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19
    };
    std::array<std::uint8_t, 16> ciphertext;
    std::array<std::uint8_t, 16> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 15 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase15)
{
    const std::array<std::uint8_t, 32> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88
    };
    const std::array<std::uint8_t, 64> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55
    };
    const std::array<std::uint8_t, 64> expected_ciphertext =
    {
        0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
        0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
        0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
        0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
        0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
        0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
        0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
        0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xac, 0xbe, 0xf2, 0x05, 0x79, 0xb4, 0xb8, 0xeb,
        0xce, 0x88, 0x9b, 0xac, 0x87, 0x32, 0xda, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,
        0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c
    };
    std::array<std::uint8_t, 64> ciphertext;
    std::array<std::uint8_t, 64> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 16 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase16)
{
    const std::array<std::uint8_t, 32> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 12> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
        0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
        0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
        0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
        0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
        0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
        0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
        0xbc, 0xc9, 0xf6, 0x62
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xac, 0xbe, 0xf2, 0x05, 0x79, 0xb4, 0xb8, 0xeb,
        0xce, 0x88, 0x9b, 0xac, 0x87, 0x32, 0xda, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88, 0x00, 0x00, 0x00, 0x01
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,
        0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 17 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase17)
{
    const std::array<std::uint8_t, 32> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 8> iv =
    {
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,
        0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,
        0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,
        0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,
        0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,
        0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,
        0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,
        0xf4, 0x7c, 0x9b, 0x1f
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xac, 0xbe, 0xf2, 0x05, 0x79, 0xb4, 0xb8, 0xeb,
        0xce, 0x88, 0x9b, 0xac, 0x87, 0x32, 0xda, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x00, 0x95, 0xdf, 0x49, 0xdd, 0x90, 0xab, 0xe3,
        0xe4, 0xd2, 0x52, 0x47, 0x57, 0x48, 0xf5, 0xd4
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,
        0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test case 18 from gcm-revised-spec (2005)
STF_TEST(AES_GCM, TestCase18)
{
    const std::array<std::uint8_t, 32> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 60> iv =
    {
        0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
        0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
        0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
        0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
        0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
        0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
        0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
        0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
        0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
        0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
        0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
        0x44, 0xae, 0x7e, 0x3f
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xac, 0xbe, 0xf2, 0x05, 0x79, 0xb4, 0xb8, 0xeb,
        0xce, 0x88, 0x9b, 0xac, 0x87, 0x32, 0xda, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x0c, 0xd9, 0x53, 0xe2, 0x14, 0x0a, 0x59, 0x76,
        0x07, 0x9f, 0x8e, 0x24, 0x06, 0xbc, 0x8e, 0xb4
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
        0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 60> plaintext_recovered;
    std::array<std::uint8_t, 16> tag;

    // Encryption

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Encrypt the plaintext
    gcm.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);

    // Decryption

    // Initialize GCM
    GCM_ gcm_d(iv, key);
    STF_ASSERT_EQ(expected_H, gcm_d.H);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm_d.Y);

    // Consume AAD
    gcm_d.InputAAD(additional_data);

    // Decrypt the ciphertext
    gcm_d.Decrypt(ciphertext, plaintext_recovered);
    STF_ASSERT_EQ(plaintext, plaintext_recovered);

    // Retrieve the authentication tag
    STF_ASSERT_TRUE(gcm_d.FinalizeAndVerifyTag(tag));
}

// Test GCM copy constructor
STF_TEST(AES_GCM, TestGCMCopy1)
{
    const std::array<std::uint8_t, 32> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 60> iv =
    {
        0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
        0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
        0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
        0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
        0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
        0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
        0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
        0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
        0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
        0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
        0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
        0x44, 0xae, 0x7e, 0x3f
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xac, 0xbe, 0xf2, 0x05, 0x79, 0xb4, 0xb8, 0xeb,
        0xce, 0x88, 0x9b, 0xac, 0x87, 0x32, 0xda, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x0c, 0xd9, 0x53, 0xe2, 0x14, 0x0a, 0x59, 0x76,
        0x07, 0x9f, 0x8e, 0x24, 0x06, 0xbc, 0x8e, 0xb4
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
        0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 16> tag;

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Make a copy of the GCM object
    GCM gcm_copy(gcm);

    // Encrypt the plaintext
    gcm_copy.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm_copy.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);
}

// Test GCM assignment operator
STF_TEST(AES_GCM, TestGCMCopy2)
{
    const std::array<std::uint8_t, 32> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 60> iv =
    {
        0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
        0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
        0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
        0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
        0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
        0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
        0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
        0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
        0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
        0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
        0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
        0x44, 0xae, 0x7e, 0x3f
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xac, 0xbe, 0xf2, 0x05, 0x79, 0xb4, 0xb8, 0xeb,
        0xce, 0x88, 0x9b, 0xac, 0x87, 0x32, 0xda, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x0c, 0xd9, 0x53, 0xe2, 0x14, 0x0a, 0x59, 0x76,
        0x07, 0x9f, 0x8e, 0x24, 0x06, 0xbc, 0x8e, 0xb4
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
        0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 16> tag;

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Make a copy of the GCM object
    GCM gcm_copy;
    gcm_copy = gcm;

    // Encrypt the plaintext
    gcm_copy.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm_copy.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);
}

// Test GCM move constructor
STF_TEST(AES_GCM, TestGCMMove)
{
    const std::array<std::uint8_t, 32> key =
    {
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    };
    const std::array<std::uint8_t, 60> iv =
    {
        0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
        0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
        0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
        0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
        0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b
    };
    const std::array<std::uint8_t, 60> plaintext =
    {
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39
    };
    const std::array<std::uint8_t, 20> additional_data =
    {
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2
    };
    const std::array<std::uint8_t, 60> expected_ciphertext =
    {
        0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
        0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
        0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
        0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
        0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
        0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
        0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
        0x44, 0xae, 0x7e, 0x3f
    };
    const std::array<std::uint8_t, 16> expected_H =
    {
        0xac, 0xbe, 0xf2, 0x05, 0x79, 0xb4, 0xb8, 0xeb,
        0xce, 0x88, 0x9b, 0xac, 0x87, 0x32, 0xda, 0xd7
    };
    const std::array<std::uint8_t, 16> expected_Y0 =
    {
        0x0c, 0xd9, 0x53, 0xe2, 0x14, 0x0a, 0x59, 0x76,
        0x07, 0x9f, 0x8e, 0x24, 0x06, 0xbc, 0x8e, 0xb4
    };
    const std::array<std::uint8_t, 16> expected_tag =
    {
        0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
        0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a
    };
    std::array<std::uint8_t, 60> ciphertext;
    std::array<std::uint8_t, 16> tag;

    // Initialize GCM
    GCM_ gcm(iv, key);
    STF_ASSERT_EQ(expected_H, gcm.H);
    STF_ASSERT_EQ(expected_Y0, gcm.Y0);
    STF_ASSERT_EQ(expected_Y0, gcm.Y);

    // Consume AAD
    gcm.InputAAD(additional_data);

    // Make a copy of the GCM object
    GCM gcm_move{std::move(gcm)};

    // Encrypt the plaintext
    gcm_move.Encrypt(plaintext, ciphertext);
    STF_ASSERT_EQ(expected_ciphertext, ciphertext);

    // Retrieve the authentication tag
    gcm_move.FinalizeAndGetTag(tag);
    STF_ASSERT_EQ(expected_tag, tag);
}
